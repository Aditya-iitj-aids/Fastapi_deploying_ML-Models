from fastapi import FastAPI, Path,HTTPException, Query
import json
app=FastAPI()#created an object app
def load_data():
    with open('patients.json','r') as f:
        data=json.load(f)
    return data
@app.get("/")#created decoratr with help of rout
#✅ A GET request is used to retrieve data from the server.
#It’s the most common way browsers or clients fetch data, like when you open a website.
#'/' its significance is that if our website name is minevosta then on hitting "minevosta.in/" in browser our webpage would be generated
def read_root():
    return{"message":"Patient management system api"}
#due to writing of uvicorn main:app --reload the 
@app.get('/about')#jab bhi koi hamara url likhr '/about' krega will be redirected to our account
def about():
    return {'msg':'fully operated and useful for recording patient records'}
# http://127.0.0.1:8000 clicking on the line. if you write /about then redirected to the second page
#if written /docs then autogenerated document will come of fastapi as it creates documentation 
#can also interact with that api
@app.get('/view')
def view():
    data=load_data()
    return data

@app.get('/patient/{patient_id}')
def view_patient(patient_id:str=Path(...,description='ID of the patient in the DB',example='P001')):
    #load all the patients
    data=load_data() #have all the patients data now

    if patient_id in data:
        return data[patient_id]
    #return {'error':'patient not found dearie'} // now raising an httpexception code
    raise HTTPException(status_code=404,detail='Patient Not Found')


#using query parameter to sort now
@app.get('/sort')
def sort_patients(sort_by:str=Query(...,description='Sort on basis of height,weight,bmi'),order:str=Query('asc',description='sort in asc or descending order')):
    valid_fields=['height','weight','bmi']

    if sort_by not in valid_fields:#height weight bmi ke alawa kuch aur puch liya
        raise HTTPException(status_code=400,detail=f'Invalid field select from{valid_fields}')
    if order not in ['asc','desc']:
        raise HTTPException(status_code=400,detail='Invalid order select')
    
    data=load_data()

    sort_order= True if order=='desc' else False
    sorted_data=sorted(data.values(),key=lambda x:x.get(sort_by,0),reverse=sort_order)

    return sorted_data